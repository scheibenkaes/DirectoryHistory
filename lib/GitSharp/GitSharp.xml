<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GitSharp</name>
    </assembly>
    <members>
        <member name="T:GitSharp.AbstractCommand">
            <summary>
            Abstract base class of all git commands. It provides basic infrastructure
            </summary>
        </member>
        <member name="M:GitSharp.AbstractCommand.AbbreviateRef(System.String,System.Boolean)">
            <summary>
            Abbreviates a ref-name, used in internal output
            </summary>
            <param name="dst">long ref</param>
            <param name="abbreviateRemote">abbreviate as remote</param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.AbstractCommand.FindGitDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs upward recursive lookup to return git directory. Honors the environment variable GIT_DIR.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.AbstractCommand.Execute">
            <summary>
            Execute the git command.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractCommand.GIT_DIR">
            <summary>
            Returns the value of the process' environment variable GIT_DIR
            </summary>
        </member>
        <member name="P:GitSharp.AbstractCommand.OutputStream">
            <summary>
            This command's output stream. If not explicitly set, the command writes to Git.OutputStream out.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractCommand.Repository">
            <summary>
            The git repository that is either result of the command (init, clone) or subject to alteration (all other commands). 
            If not explicitly set, the command uses Git.Commands.Repository.
            
            Note: InitCommand and CloneCommand ignore this property and overwrite it as a result of Execute.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractCommand.GitDirectory">
            <summary>
            The git directory. If not explicitly set, the command uses Git.GitDirectory.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractCommand.ActualDirectory">
            <summary>
            Get the directory where the Init command will initialize the repository. if GitDirectory is null ActualDirectory is used to initialize the repository.
            </summary>
        </member>
        <member name="M:GitSharp.AbstractObject.Wrap(GitSharp.Repository,GitSharp.Core.ObjectId)">
            <summary>
            Internal helper function to create the right object instance for a given hash
            </summary>
            <param name="repo"></param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.AbstractObject.Equals(System.Object)">
            <summary>
            Overriding equals to reflect that different AbstractObject instances with the same hash are in fact equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:GitSharp.AbstractObject.Hash">
            <summary>
            The object's SHA1 hash.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractObject.ShortHash">
            <summary>
            the object's abbreviated SHA1 hash
            </summary>
        </member>
        <member name="P:GitSharp.AbstractObject.IsBlob">
            <summary>
            True if the internal object is a blob. May be used for checking if the API object type correctly represents the internal object.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractObject.IsCommit">
            <summary>
            True if the internal object is a blob. May be used for checking if the API object type correctly represents the internal object.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractObject.IsTag">
            <summary>
            True if the internal object is a blob. May be used for checking if the API object type correctly represents the internal object.
            </summary>
        </member>
        <member name="P:GitSharp.AbstractObject.IsTree">
            <summary>
            True if the internal object is a blob. May be used for checking if the API object type correctly represents the internal object.
            </summary>
        </member>
        <member name="T:GitSharp.Blob">
            <summary>
            Represents a specific version of the content of a file tracked by git.
            </summary>
        </member>
        <member name="M:GitSharp.Blob.Create(GitSharp.Repository,System.String)">
            <summary>
            Create a new Blob containing the given string data as content. The string will be encoded as UTF8
            </summary>
            <param name="repo"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Blob.Create(GitSharp.Repository,System.String,System.Text.Encoding)">
            <summary>
            Create a new Blob containing the given string data as content. The string will be encoded by the submitted encoding
            </summary>
            <param name="repo"></param>
            <param name="content"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Blob.CreateFromFile(GitSharp.Repository,System.String)">
            <summary>
            Create a new Blob containing the contents of the given file.
            </summary>
            <param name="repo"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Blob.Create(GitSharp.Repository,System.Byte[])">
            <summary>
            Create a new Blob containing exactly the bytes given.
            </summary>
            <param name="repo"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="P:GitSharp.Blob.Data">
            <summary>
            Get the uncompressed contents of this blob
            </summary>
        </member>
        <member name="P:GitSharp.Blob.RawData">
            <summary>
            Get the compressed raw data of the blob
            </summary>
        </member>
        <member name="T:GitSharp.Ref">
            <summary>
            Ref is a named symbolic reference that is a pointing to a specific git object. It is not resolved
            until you explicitly retrieve the link target. The Target is not cached.
            </summary>
        </member>
        <member name="T:GitSharp.IReferenceObject">
            <summary>
            Interface for objects like Ref and Tag, which point to a different object.
            </summary>
        </member>
        <member name="M:GitSharp.Ref.Update(GitSharp.Ref)">
            <summary>
            Overwrites this ref by forwarding it to the given ref.
            </summary>
            <param name="other">The ref this object shall reference.</param>
        </member>
        <member name="M:GitSharp.Ref.IsValidName(System.String)">
            <summary>
            Check validity of a ref name. It must not contain a character that has
            a special meaning in a Git object reference expression. Some other
            dangerous characters are also excluded.
            </summary>
            <param name="refName"></param>
            <returns>
            Returns true if <paramref name="refName"/> is a valid ref name.
            </returns>
        </member>
        <member name="P:GitSharp.Ref.Target">
            <summary>
            Resolve the symbolic reference and return the object that it is currently pointing at. Target is not cached
            in order to match the behavior of a real git ref.
            </summary>
        </member>
        <member name="M:GitSharp.Branch.Delete">
            <summary>
            Delete this branch
            </summary>
        </member>
        <member name="M:GitSharp.Branch.Checkout">
            <summary>
            Switch to this branch and check it out into the working directory.
            </summary>
        </member>
        <member name="P:GitSharp.Branch.CurrentCommit">
            <summary>
            Returns the latest commit on this branch.
            </summary>
        </member>
        <member name="P:GitSharp.Branch.IsRemote">
            <summary>
            True if this ref points to a remote branch.
            </summary>
        </member>
        <member name="T:GitSharp.Change">
            <summary>
            Represents a change between two commits
            </summary>
        </member>
        <member name="P:GitSharp.Change.ReferenceCommit">
            <summary>
            The commit that the other commit is compared against
            </summary>
        </member>
        <member name="P:GitSharp.Change.ComparedCommit">
            <summary>
            The compared commit
            </summary>
        </member>
        <member name="P:GitSharp.Change.ChangeType">
            <summary>
            The kind of change
            </summary>
        </member>
        <member name="P:GitSharp.Change.ReferenceObject">
            <summary>
            The changed object in the ReferenceCommit. It may be null in some cases i.e. for ChangeType.Added
            </summary>
        </member>
        <member name="P:GitSharp.Change.ComparedObject">
            <summary>
            The changed object in the ComparedCommit. It may be null in some cases i.e. for ChangeType.Removed
            </summary>
        </member>
        <member name="P:GitSharp.Change.ChangedObject">
            <summary>
            Always returns an object, no matter what kind of change. It normally returns the ComparedCommit's version of the changed 
            object except for ChangeType.Removed where it returns the ReferenceCommit's version of the object.
            
            This property is designed to release the calling code from null checking and version selection and may be especially useful for GUI bindings.
            </summary>
        </member>
        <member name="P:GitSharp.Change.Path">
            <summary>
            The filepath of the ChangedObject
            </summary>
        </member>
        <member name="P:GitSharp.Change.Name">
            <summary>
            The filename of the ChangedObject
            </summary>
        </member>
        <member name="P:GitSharp.Change.ReferencePermissions">
            <summary>
            Unix file permissions of the ReferenceCommit's version of the object
            </summary>
        </member>
        <member name="P:GitSharp.Change.ComparedPermissions">
            <summary>
            Unix file permissions of the ComparedCommit's version of the object
            </summary>
        </member>
        <member name="P:GitSharp.Change.Commits">
            <summary>
            Returns ReferenceCommit and ComparedCommit as array
            </summary>
        </member>
        <member name="P:GitSharp.Change.Objects">
            <summary>
            Returns ReferenceObject and ComparedObject as array
            </summary>
        </member>
        <member name="P:GitSharp.Change.Permissions">
            <summary>
            Returns ReferenceObject's and ComparedObject's permissions
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.ActualDirectory">
            <summary>
            Get the directory where the Init command will initialize the repository. if GitDirectory is null ActualDirectory is used to initialize the repository.
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Source">
            <summary>
            The (possibly remote) repository to clone from.
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Local">
            <summary>
            Not implemented
            
            When the repository to clone from is on a local machine, this flag bypasses normal "git aware" transport mechanism and clones the repository 
            by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are hardlinked to save 
            space when possible. This is now the default when the source repository is specified with /path/to/repo  syntax, so it essentially is a no-op 
            option. To force copying instead of hardlinking (which may be desirable if you are trying to make a back-up of your repository), but still avoid 
            the usual "git aware" transport mechanism, --no-hardlinks can be used. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.NoHardLinks">
            <summary>
            Not implemented
            
            Optimize the cloning process from a repository on a local filesystem by copying files under .git/objects  directory. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Shared">
            <summary>
            Not implemented
            
            When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to share the objects 
            with the source repository. The resulting repository starts out without any object of its own. 
                 
            NOTE: this is a possibly dangerous operation; do not use it unless you understand what it does. If you clone your repository using this option and then 
            delete branches (or use any other git command that makes any existing commit unreferenced) in the source repository, some objects may become 
            unreferenced (or dangling). These objects may be removed by normal git operations (such as git-commit) which automatically call git gc --auto. 
            (See git-gc(1).) If these objects are removed and were referenced by the cloned repository, then the cloned repository will become corrupt.
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.ReferenceRepository">
            <summary>
            Not implemented
            
            If the reference repository is on the local machine automatically setup .git/objects/info/alternates to obtain objects from the reference repository. Using 
            an already existing repository as an alternate will require fewer objects to be copied from the repository being cloned, reducing network and local storage costs.
            
            NOTE: see NOTE to --shared option.
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Quiet">
            <summary>
            Operate quietly. This flag is also passed to the `rsync' command when given.
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Verbose">
            <summary>
            Display the progressbar, even in case the standard output is not a terminal. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.NoCheckout">
            <summary>
            No checkout of HEAD is performed after the clone is complete. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Bare">
            <summary>
            Make a bare GIT repository. That is, instead of creating "directory" and placing the administrative files in "directory"/.git, make the "directory"  itself the $GIT_DIR. 
            This obviously implies the -n  because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local 
            branch heads, without mapping them to refs/remotes/origin/. When this option is used, neither remote-tracking branches nor the related configuration variables are created. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Mirror">
            <summary>
            Set up a mirror of the remote repository. This implies --bare. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.OriginName">
            <summary>
            Instead of using the remote name origin to keep track of the upstream repository, use "name". 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.UploadPack">
            <summary>
            Not implemented.
            
            When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other end. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.TemplateDirectory">
            <summary>
            Not implemented.
            
            Specify the directory from which templates will be used; if unset the templates are taken from the installation defined default, typically /usr/share/git-core/templates. 
            </summary>
        </member>
        <member name="P:GitSharp.CloneCommand.Depth">
            <summary>
            Not implemented.
            
            Create a shallow clone with a history truncated to the specified number of revisions. A shallow repository has a number of limitations (you cannot clone or fetch from it, 
            nor push from nor into it), but is adequate if you are only interested in the recent history of a large project with a long history, and would want to send in fixes as patches. 
            </summary>
        </member>
        <member name="M:GitSharp.Commands.Clone(System.String,System.String)">
            <summary>
            Clone a repository and checkout the working directory.
            </summary>
            <param name="fromUrl"></param>
            <param name="toPath"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Commands.Clone(System.String,System.String,System.Boolean)">
            <summary>
            Clone a repository and checkout the working directory only if bare == false
            </summary>
            <param name="fromUrl"></param>
            <param name="toPath"></param>
            <param name="bare"></param>
            <returns></returns>
        </member>
        <member name="P:GitSharp.Commands.OutputStream">
            <summary>
            Get or set the output stream that all git commands are writing to. Per default this returns a StreamWriter wrapping the standard output stream.
            </summary>
        </member>
        <member name="P:GitSharp.Commands.Repository">
            <summary>
            Get or set the default git repository for all commands. A command can override this by
            setting it's own Repository property.
            
            Note: Init and Clone do not respect Repository since they create a Repository as a result of Execute.
            </summary>
        </member>
        <member name="P:GitSharp.Commands.GitDirectory">
            <summary>
            Get or set the default git directory for all commands. A command can override this, however, 
            by setting it's GitDirectory property.
            </summary>
        </member>
        <member name="T:GitSharp.Commit">
            <summary>
            Represents a revision of the content tracked in the repository.
            </summary>
        </member>
        <member name="M:GitSharp.Commit.Checkout">
            <summary>
            Checkout this commit into the repositorie's working directory. Does not reset HEAD.
            </summary>
        </member>
        <member name="M:GitSharp.Commit.Checkout(System.String)">
            <summary>
            Checkout this commit into the given directory. Does not reset HEAD!
            </summary>
            <param name="working_directory">The directory to put the sources into</param>
        </member>
        <member name="M:GitSharp.Commit.CompareCommits(GitSharp.Commit,GitSharp.Commit)">
            <summary>
            Compare reference commit against compared commit. You may pass in a null commit (i.e. for getting the changes of the first commit)
            </summary>
            <param name="reference"></param>
            <param name="compared"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Commit.CompareAgainst(GitSharp.Commit)">
            <summary>
            Compares this commit against another one and returns all changes between the two.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:GitSharp.Commit.Message">
            <summary>
            The commit message.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Author">
            <summary>
            The author of the change set represented by this commit. 
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Committer">
            <summary>
            The person who committed the change set by reusing authorship information from another commit. If the commit was created by the author himself, Committer is equal to the Author.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.AuthorDate">
            <summary>
            Original timestamp of the commit created by Author. 
            </summary>
        </member>
        <member name="P:GitSharp.Commit.CommitDate">
            <summary>
            Final timestamp of the commit, after Committer has re-committed Author's commit.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.IsCommittedByAuthor">
            <summary>
            Returns true if the commit was created by the author of the change set himself.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Parents">
            <summary>
            Returns all parent commits.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.HasParents">
            <summary>
            True if the commit has at least one parent.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Parent">
            <summary>
            The first parent commit if the commit has at least one parent, null otherwise.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Tree">
            <summary>
            The commit's reference to the root of the directory structure of the revision.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Ancestors">
            <summary>
             Returns all ancestor-commits of this commit. 
             Be careful, in a big repository this can be quite a long list and you might go out of memory. Use for small repo's only.
             
            Todo: reimplement this with an iterator instead of recursion.
            </summary>
        </member>
        <member name="P:GitSharp.Commit.Changes">
            <summary>
            Returns the changes of this commit vs. it's parent commit(s). Works for the first commit too.
            </summary>
        </member>
        <member name="T:GitSharp.Config">
            <summary>
            Represents repository-, user-, and global-configuration for git
            </summary>
        </member>
        <member name="P:GitSharp.Config.Item(System.String)">
            <summary>
            Direct config access via git style names (i.e. "user.name")
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:GitSharp.Index">
            <summary>
            Represents the index of a git repository which keeps track of changes that are about to be committed.
            </summary>
        </member>
        <member name="M:GitSharp.Index.AddAll">
            <summary>
            Add all untracked files to the index (like git add .)
            </summary>
        </member>
        <member name="M:GitSharp.Index.Add(System.String[])">
            <summary>
            Adds untracked files or directories to the index and writes the index to the disk (like "git add")
            
            Note: Add as many files as possible by one call of this method for best performance.
            </summary>
            <param name="paths">Paths to add to the index</param>
        </member>
        <member name="M:GitSharp.Index.Write">
            <summary>
            Writes the index to the disk.
            </summary>
        </member>
        <member name="M:GitSharp.Index.Read">
            <summary>
            Reads the index from the disk
            </summary>
        </member>
        <member name="T:GitSharp.InitCommand">
            <summary>
            git-init - Create an empty git repository or reinitialize an existing one 
            </summary>
        </member>
        <member name="M:GitSharp.InitCommand.Execute">
            <summary>
            Execute the command.
            </summary>
        </member>
        <member name="P:GitSharp.InitCommand.ActualDirectory">
            <summary>
            Get the directory where the Init command will initialize the repository. if GitDirectory is null ActualDirectory is used to initialize the repository.
            </summary>
        </member>
        <member name="P:GitSharp.InitCommand.Quiet">
            <summary>
            Only print error and warning messages, all other output will be suppressed. Is True by default.
            </summary>
        </member>
        <member name="P:GitSharp.InitCommand.Bare">
            <summary>
            Create a bare repository. If GIT_DIR environment is not set, it is set to the current working directory. Is False by default.
            </summary>
        </member>
        <member name="P:GitSharp.InitCommand.Template">
            <summary>
            NOT IMPLEMENTED!
            Provide the directory from which templates will be used. The default template directory is /usr/share/git-core/templates.
                
            When specified, <see cref="P:GitSharp.InitCommand.Template"/> is used as the source of the template files rather than the default. The template files include some directory structure, some suggested "exclude patterns", and copies of non-executing "hook" files. The suggested patterns and hook files are all modifiable and extensible.
            </summary>
        </member>
        <member name="P:GitSharp.InitCommand.Shared">
            <summary>
            NOT IMPLEMENTED!
                Specify that the git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. When specified, the config variable "core.sharedRepository" is set so that files and directories under $GIT_DIR are created with the requested permissions. When not specified, git will use permissions reported by umask(2).
                The option can have the following values, defaulting to group if no value is given:
                * umask (or false): Use permissions reported by umask(2). The default, when --shared is not specified.
                * group (or true): Make the repository group-writable, (and g+sx, since the git group may be not the primary group of all users). This is used to loosen the permissions of an otherwise safe umask(2) value. Note that the umask still applies to the other permission bits (e.g. if umask is 0022, using group will not remove read privileges from other (non-group) users). See 0xxx for how to exactly specify the repository permissions.
                * all (or world or everybody): Same as group, but make the repository readable by all users.
                * 0xxx: 0xxx is an octal number and each file will have mode 0xxx. 0xxx will override users' umask(2) value (and not only loosen permissions as group and all does). 0640 will create a repository which is group-readable, but not group-writable or accessible to others. 0660 will create a repo that is readable and writable to the current user and group, but inaccessible to others.
                By default, the configuration flag receive.denyNonFastForwards is enabled in shared repositories, so that you cannot force a non fast-forwarding push into it.
            </summary>
        </member>
        <member name="T:GitSharp.Leaf">
            <summary>
            Leaf represents a file entry in a Tree.
            </summary>
        </member>
        <member name="P:GitSharp.Leaf.IsExecutable">
            <summary>
            True if the file is executable (unix).
            </summary>
        </member>
        <member name="P:GitSharp.Leaf.Name">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:GitSharp.Leaf.Path">
            <summary>
            The full path relative to repostiory root
            </summary>
        </member>
        <member name="P:GitSharp.Leaf.Permissions">
            <summary>
            The unix file permissions.
            
            Todo: model this with a permission object
            </summary>
        </member>
        <member name="P:GitSharp.Leaf.Parent">
            <summary>
            The parent Tree.
            </summary>
        </member>
        <member name="T:GitSharp.Options">
            <summary>
            Represents git command line options such as --version.
            </summary>
        </member>
        <member name="P:GitSharp.Options.Version">
            <summary>
            Returns the version of GitSharp.
            </summary>
        </member>
        <member name="T:GitSharp.Repository">
            <summary>
            Represents a git repository
            </summary>
        </member>
        <member name="M:GitSharp.Repository.#ctor(System.String)">
            <summary>
            Initializes the Repository object.
            </summary>
            <param name="path">Path to the local git repository.</param>
        </member>
        <member name="M:GitSharp.Repository.IsValid(System.String)">
            <summary>
            Checks if the directory given by the path is a valid non-bare git repository. The given path may either point to 
            the working directory or the repository's .git directory.
            </summary>
            <param name="path"></param>
            <returns>Returns true if the given path is a valid git repository, false otherwise.</returns>
        </member>
        <member name="M:GitSharp.Repository.IsValid(System.String,System.Boolean)">
            <summary>
            Checks if the directory given by the path is a valid git repository.
            </summary>
            <param name="path"></param>
            <param name="bare"></param>
            <returns>Returns true if the given path is a valid git repository, false otherwise.</returns>
        </member>
        <member name="M:GitSharp.Repository.Commit(System.String,GitSharp.Author)">
            <summary>
            Commit staged changes and updates HEAD
            </summary>
            <param name="message">The commit message</param>
            <param name="author">The author of the content to be committed</param>
            <returns>Returns the newly created commit</returns>
        </member>
        <member name="M:GitSharp.Repository.Init(System.String)">
            <summary>
            Initializes a non-bare repository. Use GitDirectory to specify location.
            </summary>
            <returns>The initialized repository</returns>
        </member>
        <member name="M:GitSharp.Repository.Init(System.String,System.Boolean)">
            <summary>
            Initializes a repository. Use GitDirectory to specify the location. Default is the current directory.
            </summary>
            <param name="path"></param>
            <param name="bare"></param>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Repository.Init(GitSharp.InitCommand)">
            <summary>
            Initializes a repository in the current location using the provided git command's options.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:GitSharp.Repository.Directory">
            <summary>
            Returns the path to the repository database (i.e. the .git directory).
            </summary>
        </member>
        <member name="P:GitSharp.Repository.Head">
            <summary>
            Gets or sets Head which is a symbolic reference to the active branch. Note that setting head 
            does not automatically check out that branch into the repositories working directory. 
            </summary>
        </member>
        <member name="P:GitSharp.Repository.IsBare">
            <summary>
            Returns true if this repository is a bare repository. Bare repositories don't have a working directory and thus do not support some operations.
            </summary>
        </member>
        <member name="P:GitSharp.Repository.WorkingDirectory">
            <summary>
            Returns the path to the working directory (i.e. the parent of the .git directory of a non-bare repo). Returns null if it is a bare repository.
            </summary>
        </member>
        <member name="P:GitSharp.Repository.Config">
            <summary>
            Returns the git configuration containing repository-specific, user-specific and global 
            settings.
            </summary>
        </member>
        <member name="P:GitSharp.Repository.Status">
            <summary>
            Get the differences between the working directory and the index.
            Returns a data structure containing the results (like "git status").
            </summary>
        </member>
        <member name="T:GitSharp.RepositoryStatus">
            <summary>
            A summary of changes made to the working directory of a repository with respect to its index.
            </summary>
        </member>
        <member name="T:GitSharp.Tag">
            <summary>
            Represents a git tag.
            </summary>
        </member>
        <member name="P:GitSharp.Tag.Name">
            <summary>
            The tag name.
            </summary>
        </member>
        <member name="P:GitSharp.Tag.Target">
            <summary>
            The object that has been tagged.
            </summary>
        </member>
        <member name="T:GitSharp.Tree">
            <summary>
            Represents a directory in the git repository.
            </summary>
        </member>
        <member name="P:GitSharp.Tree.IsRoot">
            <summary>
            True if the tree has no parent.
            </summary>
        </member>
        <member name="P:GitSharp.Tree.Children">
            <summary>
            Entries of the tree. These are either Tree or Leaf objects representing sub-directories or files.
            </summary>
        </member>
        <member name="P:GitSharp.Tree.Trees">
            <summary>
            Tree entries representing this directory's subdirectories
            </summary>
        </member>
        <member name="P:GitSharp.Tree.Leaves">
            <summary>
            Leaf entries representing this directory's files
            </summary>
        </member>
    </members>
</doc>
