<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GitSharp.Tests</name>
    </assembly>
    <members>
        <member name="T:GitSharp.Tests.RepositoryTestCase">
             Base class for most unit tests.
            
             Sets up a predefined test repository and has support for creating additional
             repositories and destroying them when the tests are finished.
            
             A system property <em>jgit.junit.usemmap</em> defines whether memory mapping
             is used. Memory mapping has an effect on the file system, in that memory
             mapped files in java cannot be deleted as long as they mapped arrays have not
             been reclaimed by the garbage collector. The programmer cannot control this
             with precision, though hinting using <em>java.lang.System#gc</em>
             often helps.
        </member>
        <member name="M:GitSharp.Tests.RepositoryTestCase.Configure">
            <summary>
            Configure Git before setting up test repositories.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RepositoryTestCase.recursiveDelete(System.IO.FileSystemInfo)">
            <summary>
            Utility method to delete a directory recursively. It is
            also used internally. If a file or directory cannot be removed
            it throws an AssertionFailure.
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:GitSharp.Tests.RepositoryTestCase.recursiveDelete(System.IO.FileSystemInfo,System.Boolean,System.String,System.Boolean)">
            <summary>
            Utility method to delete a directory recursively. It is
            also used internally. If a file or directory cannot be removed
            it throws an AssertionFailure.
            </summary>
            <param name="fs"></param>
            <param name="silent"></param>
            <param name="name"></param>
            <param name="failOnError"></param>
            <returns></returns>
        </member>
        <member name="F:GitSharp.Tests.RepositoryTestCase.userGitConfig">
            <summary>
            mock user's global configuration used instead ~/.gitconfig.
            This configuration can be modified by the tests without any
            effect for ~/.gitconfig.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RepositoryTestCase.createNewEmptyRepo(System.Boolean)">
            <summary>
            Helper for creating extra empty repos
            </summary>
            <returns>
            A new empty git repository for testing purposes
            </returns>
        </member>
        <member name="M:GitSharp.Tests.DirectoryCache.DirCacheTreeTest.testWriteReadTree">
            <summary>
            We had bugs related to buffer size in the DirCache. This test creates an
            index larger than the default BufferedInputStream buffer size. This made
            the DirCache unable to Read the extensions when index size exceeded the
            buffer size (in some cases at least).
            </summary>
        </member>
        <member name="M:GitSharp.Tests.FnMatch.FileNameMatcherTest.testCombinedRangesInOneGroupCase1">
            <summary>
            The c belongs to the range a-c. "-e" is no valid range so d should not 	match.
            </summary>
            <exception cref="T:System.Exception">for some reasons </exception>
        </member>
        <member name="M:GitSharp.Tests.RevWalk.RevCommitParseTest.testParse_explicit_encoded">
            <summary>
            Test parsing of a commit whose encoding is given and works.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RevWalk.RevCommitParseTest.testParse_explicit_bad_encoded">
            <summary>
            This is a twisted case, but show what we expect here. We can revise the
            expectations provided this case is updated.
            
            What happens here is that an encoding us given, but data is not encoded
            that way (and we can detect it), so we try other encodings.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RevWalk.RevCommitParseTest.testParse_explicit_bad_encoded2">
            <summary>
            This is a twisted case too, but show what we expect here. We can revise the
            expectations provided this case is updated.
            
            What happens here is that an encoding us given, but data is not encoded
            that way (and we can detect it), so we try other encodings. Here data could
            actually be decoded in the stated encoding, but we override using UTF-8.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RevWalk.RevTagParseTest.testParse_explicit_encoded">
             Test parsing of a commit whose encoding is given and works.
            
             @throws Exception
        </member>
        <member name="M:GitSharp.Tests.RevWalk.RevTagParseTest.testParse_explicit_bad_encoded">
             This is a twisted case, but show what we expect here. We can revise the
             expectations provided this case is updated.
            
             What happens here is that an encoding us given, but data is not encoded
             that way (and we can detect it), so we try other encodings.
            
             @throws Exception
        </member>
        <member name="M:GitSharp.Tests.RevWalk.RevTagParseTest.testParse_explicit_bad_encoded2">
             This is a twisted case too, but show what we expect here. We can revise
             the expectations provided this case is updated.
            
             What happens here is that an encoding us given, but data is not encoded
             that way (and we can detect it), so we try other encodings. Here data
             could actually be decoded in the stated encoding, but we override using
             UTF-8.
            
             @throws Exception
        </member>
        <member name="M:GitSharp.Tests.Transport.BundleWriterTest.testWrite1">
            Incremental bundle test
            
            @throws Exception
        </member>
        <member name="M:GitSharp.Tests.Transport.IndexPackTest.test1">
            <summary>
            Test indexing one of the test packs in the egit repo. It has deltas.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.Transport.IndexPackTest.test2">
            <summary>
            This is just another pack. It so happens that we have two convenient pack to
            test with in the repository.
            </summary>
        </member>
        <member name="T:GitSharp.Tests.Util.TestRng">
            Toy RNG to ensure we get predictable numbers during unit tests. 
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.GetFileForPack34Be9032">
            <summary>
            Return File with appropriate index version for prepared pack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.GetFileForPackdf2982F28">
            <summary>
            Return File with appropriate index version for prepared pack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.testCRC32">
            <summary>
            Verify CRC32 support.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.testIteratorMethodsContract">
            <summary>
            Test contracts of Iterator methods and this implementation remove()
            limitations.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.testIteratorReturnedValues1">
            <summary>
            Test results of iterator comparing to content of well-known (prepared)
            small index.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.testCompareEntriesOffsetsWithFindOffsets">
            <summary>
            Compare offset from iterator entries with output of findOffset() method.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.Util.PackIndexTestCase.testIteratorReturnedValues2">
            <summary>
            Test partial results of iterator comparing to content of well-known
            (prepared) dense index, that may need multi-level indexing.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackIndexV1Test.testCRC32">
            <summary>
            Verify CRC32 - V1 should not index anything.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackIndexV2Tests.testCRC32">
            <summary>
            Verify CRC32 indexing.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackReverseIndexTest.setUp">
            <summary>
            Set up tested class instance, test constructor by the way.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackReverseIndexTest.testFindObject">
            <summary>
            Test findObject() for all index entries.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackReverseIndexTest.testFindObjectWrongOffset">
            <summary>
            Test findObject() with illegal argument.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackReverseIndexTest.testFindNextOffset">
            <summary>
            Test findNextOffset() for all index entries.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackReverseIndexTest.testFindNextOffsetWrongOffset">
            <summary>
            Test findNextOffset() with wrong illegal argument as offset.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testIgnoreNonExistingObjects">
            <summary>
            Try to pass non-existing object as uninteresting, with ignoring setting.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack1">
            <summary>
            Create pack basing on only interesting objects, then precisely verify
            content. No delta reuse here.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack2SizeOffsetsVsRefs">
            <summary>
            Compare sizes of packs created using
            <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseRefs"/> and
            <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseOffsets"/>. 
            The pack with delta bases written as offsets should be smaller.
            </summary>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack4SizeThinVsNoThin">
            <summary>
            Compare sizes of packs created using <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack4"/> and
            <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack4ThinPack"/>. 
            Obviously, the thin pack should be smaller.
            </summary>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testContructor">
             <summary>
            Test constructor for exceptions, default settings, initialization.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testModifySettings">
            <summary>
            Change default settings and verify them.
            </summary>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testNotIgnoreNonExistingObjects">
            <summary>
            Try to pass non-existing object as uninteresting, with non-ignoring
            setting.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWriteEmptyPack1">
            <summary>
            Write empty pack by providing empty sets of interesting/uninteresting
            objects and check for correct format.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWriteEmptyPack2">
            <summary>
            Write empty pack by providing empty iterator of objects to write and
            check for correct format.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack1NoObjectReuse">
            <summary>
            Test writing pack without object reuse. Pack content/preparation as in
            <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack1"/>.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack2">
            <summary>
            Create pack basing on both interesting and uninteresting objects, then
            precisely verify content. No delta reuse here.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasCRC32Copy">
            <summary>
            Test pack writing with delta reuse. Raw-data copy (reuse) is made on a
            pack with CRC32 index. Pack configuration as in
            <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseRefs"/>.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseOffsets">
            <summary> 
            Test pack writing with delta reuse. Delta bases referred as offsets. Pack
            configuration as in <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseRefs"/>.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseRefs">
            <summary>
            Test pack writing with deltas reuse, delta-base first rule. Pack
            content/preparation as in <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2"/>.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas">
            <summary>
            Compare sizes of packs created using <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2"/> and
            <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack2DeltasReuseRefs"/>. The pack using deltas should
            be smaller.
            </summary>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack3">
            <summary>
            Create pack basing on fixed objects list, then precisely verify content.
            No delta reuse here.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
            <exception cref="T:GitSharp.Core.Exceptions.MissingObjectException">
            </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack4">
            <summary>
            Another pack creation: basing on both interesting and uninteresting
            objects. No delta reuse possible here, as this is a specific case when we
            write only 1 commit, associated with 1 tree, 1 blob.
            </summary>
             <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.PackWriterTest.testWritePack4ThinPack">
            <summary>
            Test thin pack writing: 1 blob delta base is on objects edge. Pack
            configuration as in <seealso cref="M:GitSharp.Tests.PackWriterTest.testWritePack4"/>.
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="T:GitSharp.Tests.RefTest">
            Misc tests for refs. A lot of things are tested elsewhere so not having a
            test for a ref related method, does not mean it is untested.
        </member>
        <member name="M:GitSharp.Tests.RefTest.testReadLoosePackedRef">
            <summary>
            Let an "outsider" Create a loose ref with the same name as a packed one
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RefTest.testReadSimplePackedRefSameRepo">
            <summary>
            Modify a packed ref using the API. This creates a loose ref too, ie. LOOSE_PACKED
            </summary>
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testDeleteHEADreferencedRef">
             Delete a ref that is pointed to by HEAD
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testDeleteLooseAndItsDirectory">
             Delete a loose ref and make sure the directory in refs is deleted too,
             and the reflog dir too
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testUpdateRefForward">
             Try modify a ref forward, fast forward
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testDeleteLoosePacked">
             Delete a ref that exists both as packed and loose. Make sure the ref
             cannot be resolved after delete.
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testUpdateRefNoChange">
             Try modify a ref to same
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testRefsCacheAfterUpdate">
             Test case originating from
             <a href="http://bugs.eclipse.org/285991">bug 285991</a>
            
             Make sure the in memory cache is updated properly after
             update of symref. This one did not fail because the
             ref was packed due to implementation issues.
            
             @throws Exception
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testRefsCacheAfterUpdateLoosOnly">
             Test case originating from
             <a href="http://bugs.eclipse.org/285991">bug 285991</a>
            
             Make sure the in memory cache is updated properly after
             update of symref.
            
             @throws Exception
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testUpdateRefLockFailureWrongOldValue">
             Try modify a ref, but get wrong expected old value
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testUpdateRefForwardWithCheck1">
             Try modify a ref forward, fast forward, checking old value first
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testUpdateRefForwardWithCheck2">
             Try modify a ref forward, fast forward, checking old commit first
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testUpdateRefLockFailureLocked">
             Try modify a ref that is locked
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.RefUpdateTest.testDeleteLoosePackedRejected">
             Try to delete a ref. Delete requires force.
            
             @throws IOException
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorLeafOnlyTest.testEmpty">
            <summary>
            Empty tree
            </summary>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorLeafOnlyTest.testSimpleF1">
            <summary>
            One file
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorLeafOnlyTest.testSimpleF2">
            <summary>
            two files
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorLeafOnlyTest.testSimpleT">
            <summary>
            Empty tree
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPostOrderTest.testEmpty">
            <summary>
            Empty tree
            </summary>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPostOrderTest.testSimpleF1">
            <summary>
            one file
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPostOrderTest.testSimpleF2">
            <summary>
            two files
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPostOrderTest.testSimpleT">
            <summary>
            Empty tree
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPreOrderTest.testEmpty">
            <summary>
            Empty tree
            </summary>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPreOrderTest.testSimpleF1">
            <summary>
            one file
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPreOrderTest.testSimpleF2">
            <summary>
            two files
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:GitSharp.Tests.TreeIteratorPreOrderTest.testSimpleT">
            <summary>
            Empty tree
            </summary>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
    </members>
</doc>
